layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8,xlab="p")
hist(mus,breaks=50,prob=TRUE,col=8,xlab="p")
hist(mus,breaks=100,prob=TRUE,col=8,xlab="p")
mus=rep(0,100000)
for (i in 0:100000){
sample = runif(100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=10,prob=TRUE,col=8,xlab="p")
hist(mus,breaks=100,prob=TRUE,col=8,xlab="p")
mus=rep(0,100000)
for (i in 0:100000){
sample = runif(100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=100,prob=TRUE,col=8,xlab="p")
mus=rep(0,100000)
for (i in 0:100000){
sample = runif(100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=100,prob=TRUE,col=8,xlab="p")
mus=rep(0,1000)
for (i in 0:1000){
sample = runif(100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=100,prob=TRUE,col=8,xlab="p")
hist(mus,breaks=10,prob=TRUE,col=8,xlab="p")
hist(mus,breaks=50,prob=TRUE,col=8,xlab="p")
mus=rep(0,100000)
for (i in 0:100000){
sample = runif(100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8,xlab="p")
sample = rbeta(100)
sample = rbeta(0,1,100)
mu = mean(sample)
mus[i] = mu
for (i in 0:100000){
sample = rbeta(0,1,100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8,xlab="p")
mus=rep(0,100000)
for (i in 0:100000){
sample = rbeta(0,1,100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8,xlab="p")
mus=rep(0,100000)
for (i in 0:100000){
sample = rbeta(1,1,100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8,xlab="p")
hist(mus,breaks=50,prob=TRUE,col=8)
hist(mus,breaks=50,prob=TRUE,col=8)
mus=rep(0,100000)
for (i in 0:100000){
sample = rbeta(-1,1,100)
mu = mean(sample)
mus[i] = mu
}
mus=rep(0,100000)
for (i in 0:100000){
sample = rbeta(2,1,100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8)
mus=rep(0,100000)
for (i in 0:100000){
sample = rbeta(10,1,100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8)
mus=rep(0,100000)
for (i in 0:100000){
sample = rbeta(15,1,100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8)
for (i in 0:10000){
sample = rbeta(15,1,100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8)
mus=rep(0,10000)
for (i in 0:10000){
sample = rbeta(15,1,100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8)
mus=rep(0,1000000)
for (i in 0:1000000){
sample = rbeta(15,1,100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8)
source("~/.active-rstudio-document")
mus=rep(0,1000000)
for (i in 0:1000000){
sample = rbeta(15,1,100)
mu = mean(sample)
mus[i] = mu
}
layout(matrix(1:1,1,1))
hist(mus,breaks=50,prob=TRUE,col=8)
q()
rm()
x <- rnorm(50)
y <- rnorm(x)
plot(x,y)
ls()
x <- 1:20
w <- 1+sqrt(x)/2
dummy = data.frame(x=x,y=x+rnorm(x)*w)
dummy
dummy = data.frame(xs=x,y=x+rnorm(x)*w)
dummy
dummy[["xs"]]
dummy
dummy = data.frame(x=x,y=x+rnorm(x)*w)
dummy
dummy[["xs"]]
dummy[["x"]]
fm <- lm(y ~ x, data=dummy)
fm = lm(y ~ x, data=dummy)
summery(fm)
summary(fm)
fm1 <- lm(y ~ x, data=dummy, weight=1/w^2)
summary(fm1)
attach(dummy)
x <- rnorm(50)
y <- rnorm(x)
plot(x,y)
ls()
x <- 1:20
x <- rnorm(50)
y <- rnorm(x)
plot(x,y)
ls()
x <- 1:20
w <- 1+sqrt(x)/2
dummy = data.frame(x=x,y=x+rnorm(x)*w)
fm = lm(y ~ x, data=dummy)
summary(fm)
fm1 <- lm(y ~ x, data=dummy, weight=1/w^2)
summary(fm1)
attach(dummy)
lrf <- lowess(x, y)
x <- 1:20
w <- 1+sqrt(x)/2
y <- rnorm(x)
plot(x,y)
ls()
x1 <- 1:20
w <- 1+sqrt(x1)/2
dummy = data.frame(x=x,y=x+rnorm(x)*w)
fm = lm(y ~ x, data=dummy)
summary(fm)
fm1 <- lm(y ~ x, data=dummy, weight=1/w^2)
summary(fm1)
attach(dummy)
lrf <- lowess(x, y)
plot(x,y)
lines(x, lrf$y)
abline(0, 1, lty=3)
abline(coef(fm))
abline(coef(fm1), col = "red")
x <- rnorm(50)
y <- rnorm(x)
plot(x,y)
fm = lm(y ~ x, data=dummy)
plot(x,y)
lines(x, lrf$y)
abline(0, 1, lty=3)
abline(coef(fm))
abline(coef(fm1), col = "red")
x <- rnorm(50)
y <- rnorm(x)
plot(x,y)
dummy = data.frame(x=x,y=x+rnorm(x)*w)
fm = lm(y ~ x, data=dummy)
plot(x,y)
lines(x, lrf$y)
abline(0, 1, lty=3)
abline(coef(fm))
abline(coef(fm1), col = "red")
x <- rnorm(50)
y <- rnorm(x)
dummy = data.frame(x=x,y=x+rnorm(x)*w)
plot(x,y)
fm = lm(y ~ x, data=dummy)
summary(fm)
abline(coef(fm))
abline(coef(fm1), col = "red")
abline(0, 1, lty=3)
abline(0, 2, lty=3)
abline(0, 3, lty=3)
abline(0, 0, lty=3)
x <- rnorm(50)
y <- rnorm(x)
plot(x,y)
x <- rnorm(1000)
y <- rnorm(x)
plot(x,y)
x <- 1:20
w <- 1+sqrt(x1)/2
x <- 1:20
w <- 1+sqrt(x)/2
dummy = data.frame(x=x,y=x+rnorm(x)*w)
fm = lm(y ~ x, data=dummy)
summary(fm)
plot(x,y)
dummy = data.frame(x=x,y=x+rnorm(x)*w)
fm = lm(y ~ x, data=dummy)
summary(fm)
lrf <- lowess(x, y)
y=x+rnorm(x)*w
dummy = data.frame(x=x,y=y)
fm = lm(y ~ x, data=dummy)
summary(fm)
plot(x,y)
lines(x, lrf$y)
abline(0, 0, lty=3)
abline(coef(fm))
abline(coef(fm1), col = "red")
y=x+rnorm(x)*w
dummy = data.frame(x=x,y=y)
fm = lm(y ~ x, data=dummy)
summary(fm)
lrf <- lowess(x, y)
plot(x,y)
lines(x, lrf$y)
abline(0, 0, lty=3)
abline(0, 1, lty=3)
plot(x,y)
lines(x, lrf$y)
abline(0, 1, lty=3)
abline(coef(fm))
abline(coef(fm1), col = "red")
fm1 <- lm(y ~ x, data=dummy, weight=1/w^2)
summary(fm1)
plot(x,y)
lines(x, lrf$y)
abline(0, 1, lty=3)
abline(coef(fm))
abline(coef(fm1), col = "red")
plot(x,y)
lines(x, lrf$y)
abline(0, 1, lty=3)
abline(coef(fm))
abline(coef(fm1), col = "red")
x <- 1:00
w <- 1+sqrt(x)/2
y=x+rnorm(x)*w
dummy = data.frame(x=x,y=y)
fm = lm(y ~ x, data=dummy)
summary(fm)
fm1 <- lm(y ~ x, data=dummy, weight=1/w^2)
summary(fm1)
attach(dummy)
lrf <- lowess(x, y)
plot(x,y)
x <- 1:100
w <- 1+sqrt(x)/2
y=x+rnorm(x)*w
dummy = data.frame(x=x,y=y)
fm = lm(y ~ x, data=dummy)
summary(fm)
fm1 <- lm(y ~ x, data=dummy, weight=1/w^2)
summary(fm1)
lrf <- lowess(x, y)
plot(x,y)
lines(x, lrf$y)
abline(0, 1, lty=3)
abline(coef(fm))
abline(coef(fm1), col = "red")
x <- 1:500
w <- 1+sqrt(x)/2
y=x+rnorm(x)*w
dummy = data.frame(x=x,y=y)
fm = lm(y ~ x, data=dummy)
summary(fm)
fm1 <- lm(y ~ x, data=dummy, weight=1/w^2)
summary(fm1)
lrf <- lowess(x, y)
plot(x,y)
lines(x, lrf$y)
abline(0, 1, lty=3)
abline(coef(fm))
abline(coef(fm1), col = "red")
set.seed(2021)
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
df
differences = df[["QB"]]-df[["WR"]]
qb = df[["QB"]]
wr = df[["WR"]]
y=differences
mu.0=0
source("norm.Invchi2.mcmc.R")
setwd("~/Documents/Bayesian Statistical Methods/hw1")
set.seed(2021)
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
df
differences = df[["QB"]]-df[["WR"]]
qb = df[["QB"]]
wr = df[["WR"]]
y=differences
mu.0=0
s2.0=100
source("norm.Invchi2.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.IG.mcmc(y,mu.0,s2.0,mean(y),n.mcmc)
y=differences
mu.0=0
s2.0=100
source("norm.Invchi2.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.Invchi2.mcmc(y,mu.0,s2.0,mean(y),n.mcmc)
mu.0=0
s2.0=100
source("norm.Invchi2.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.Invchi2.mcmc(y,mu.0,s2.0,mean(y),n.mcmc)
s2=rinvchisq(1, tmp.nu, scale=1/df)
s2=rinvchisq(1, tmp.nu, scale=1/df)
s2=1/rchisq(1, tmp.nu, scale=1/df)
s2=rinvchisq(1, tmp.nu, scale=1/df)
dinvchisq(x, nu, tau, log = FALSE)
mu=rnorm(1,tmp.mn,sqrt(tmp.var))
tmp.mn=(s2*mu.0+s2.0*sum(y))/(s2+n*s2.0)
tmp.var=s2*s2.0/(s2+n*s2.0)
mu=rnorm(1,tmp.mn,sqrt(tmp.var))
s2=1/rgamma(1,tmp.q,,tmp.r)
norm.IG.mcmc <- function(y,mu.0,s2.0,mu.strt,n.mcmc){
#
#  Gibbs Sampler for Gaussian Data Model, with Gaussian prior on mu and IG on s2.
#
#  Example Use:
#  mcmc.out=norm.IG.mcmc(rnorm(10,3,2),0,100,0,10000)
#  mcmc.out=norm.IG.mcmc(rnorm(100,3,2),0,100,0,10000)
#
####
####  Set up variables
####
n.burn=round(n.mcmc/10)
n=length(y)
mu.save=rep(0,n.mcmc)
s2.save=rep(0,n.mcmc)
mu=mu.strt
r=1000
q=0.001
####
####  Begin Gibbs Loop
####
for(k in 1:n.mcmc){
if((k%%1000)==0) cat(k," ") # this prints k every 1000 iterations
####
####  Sample s2
####
tmp.r=1/(sum((y-mu)^2)/2+1/r)
tmp.q=n/2+q
s2=1/rgamma(1,tmp.q,,tmp.r)
####
####  Sample mu
####
tmp.mn=(s2*mu.0+s2.0*sum(y))/(s2+n*s2.0)
tmp.var=s2*s2.0/(s2+n*s2.0)
mu=rnorm(1,tmp.mn,sqrt(tmp.var))
####
####  Save Samples
####
mu.save[k]=mu
s2.save[k]=s2
}
cat("\n")
####
####  Write Output
####
list(mu.save=mu.save,s2.save=s2.save,mu.0=mu.0,s2.0=s2.0,q=q,r=r,n.mcmc=n.mcmc,n.burn=n.burn)
}
s2=1/rgamma(1,tmp.q,,tmp.r)
tmp.r=1/(sum((y-mu)^2)/2+1/r)
tmp.q=n/2+q
s2=1/rgamma(1,tmp.q,,tmp.r)
n.burn=round(.1*n.mcmc)
out=norm.Invchi2.mcmc(y,mu.0,s2.0,mean(y),n.mcmc)
s2=rinvchisq(1, tmp.nu, scale=1/df)
mu.0=0
s2.0=100
source("norm.Invchi2.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.Invchi2.mcmc(y,mu.0,s2.0,mean(y),n.mcmc)
mu.0=0
s2.0=100
source("norm.Invchi2.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.Invchi2.mcmc(y,mu.0,s2.0,mean(y),n.mcmc)
mu.0=0
s2.0=100
source("norm.Invchi2.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.Invchi2.mcmc(y,mu.0,s2.0,mean(y),n.mcmc)
mu.0=0
s2.0=100
source("norm.Invchi2.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.Invchi2.mcmc(y,mu.0,s2.0,mean(y),n.mcmc)
layout(matrix(1:2,2,1))
plot(out$mu.save,type="l",main="",ylab=bquote(mu),xlab="MCMC Iteration")
abline(h=mu.true,lwd=2,col=rgb(0,1,0,.5))
plot(out$s2.save,type="l",main="",ylab=bquote(sigma^2),xlab="MCMC Iteration")
abline(h=s2.true,lwd=2,col=rgb(0,1,0,.5))
mean(out$mu.save[-(1:n.burn)])
quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975))
mean(out$s2.save[-(1:n.burn)])
quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975))
dinvgamma <- function(x,q,r){
x^(-q-1) * exp(-1/r/x) / (r^q) / gamma(q)
}
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
set.seed(2021)
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["QB"]]-df[["WR"]]
qb = df[["QB"]]
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["QB"]]-df[["WR"]]
y=differences
mu.0=0
s2.0=100
source("norm.Invchi2.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.Invchi2.mcmc(y,mu.0,s2.0,mean(y),n.mcmc)
warnings()
n.burn=round(n.mcmc/10)
n=length(y)
mu.save=rep(0,n.mcmc)
s2.save=rep(0,n.mcmc)
mu=mu.strt
nu = 1
set.seed(2021)
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["QB"]]-df[["WR"]]
y=differences
mu.0=0
s2.0=100
source("norm.Invchi2.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.invchisq.mcmc(y,mu.0,s2.0,mean(y),n.mcmc)
out=norm.invchisq.mcmc(y,mu.0,s2.0,1,mean(y),n.mcmc)
source("norm.invchisq.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.invchisq.mcmc(y,mu.0,s2.0,1,mean(y),n.mcmc)
warnings()
source("norm.invchisq.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.invchisq.mcmc(y,mu.0,s2.0,1,mean(y),n.mcmc)
mu.0=0
s2.0=100
source("norm.invchisq.mcmc.R")
n.mcmc=100000
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["QB"]]-df[["WR"]]
set.seed(2021)
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
